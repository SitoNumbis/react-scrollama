{"version":3,"sources":["../../src/DebugOffset.js","../../src/Scrollama.js","../../src/Step.js","Demo.js","index.js"],"names":["markerStyles","position","left","width","height","borderTop","zIndex","offsetTextStyles","fontSize","fontFamily","margin","padding","DebugOffset","offsetMargin","offsetVal","style","top","OBSERVER_NAMES","Scrollama","stepEnter","stepExit","stepProgress","name","o","window","arg","id","step","body","document","html","Math","getPageHeight","viewH","enable","console","stepStateOffsetHeight","marginTop","marginBottom","options","rootMargin","obs","IntersectionObserver","threshold","entry","isIntersecting","bottom","target","topAdjusted","bottomAdjusted","intersectionRatio","count","t","ratio","i","progress","resp","element","data","direction","children","onStepEnter","onStepExit","onStepProgress","offset","debug","React","childId","isNaN","this","domDidLoad","bind","isDebug","state","props","scrollamaId","ref","Component","Step","offsetHeight","nodeRef","Demo","steps","setState","classes","className","navbar","href","pageTitle","pageSubtitle","graphicContainer","scroller","map","value","isVisible","background","visibility","key","round","graphic","PureComponent","injectSheet","display","right","textAlign","color","justifyContent","flexBasis","backgroundColor","alignItems","fontWeight","border","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.cc30bd99.chunk.js","sourcesContent":["import React from 'react';\n\n// Since these styles are the only styles in the library, I opted to use inline\n// styling to maintain dependency independence\nconst markerStyles = {\n  position: 'fixed',\n  left: 0,\n  width: '100%',\n  height: 0,\n  borderTop: '2px dashed black',\n  zIndex: 9999,\n};\nconst offsetTextStyles = {\n  fontSize: '12px',\n  fontFamily: 'monospace',\n  margin: 0,\n  padding: 6,\n};\n\nconst DebugOffset = ({ offsetMargin, offsetVal }) => (\n  <div style={{ ...markerStyles, top: offsetMargin }}>\n    <p style={offsetTextStyles}>trigger: {offsetVal}</p>\n  </div>\n);\n\nexport default DebugOffset;\n","import React, { Component, Fragment } from 'react';\nimport DebugOffset from './DebugOffset';\n\nconst OBSERVER_NAMES = [\n  'stepAbove',\n  'stepBelow',\n  'stepProgress',\n  'viewportAbove',\n  'viewportBelow',\n];\n\nclass Scrollama extends Component {\n  // step trigger callbacks\n  cb = {\n    stepEnter: () => null,\n    stepExit: () => null,\n    stepProgress: () => null,\n  };\n\n  // intersection observers\n  io = {};\n\n  // disconnects all observers of a certain function\n  disconnectObserver = name =>\n    this.io[name] && this.io[name].forEach(o => o.disconnect());\n\n  // stores step elements by id\n  stepElIds = [];\n\n  viewH = typeof window !== 'undefined' ? window.innerHeight : 0;\n  pageH = 0;\n  offsetVal = 0;\n  offsetMargin = 0;\n  previousYOffset = 0;\n  progressThreshold = 0;\n\n  direction = 'down';\n\n  updateDirection = () => {\n    if (window.pageYOffset > this.previousYOffset) {\n      this.direction = 'down';\n    } else if (window.pageYOffset < this.previousYOffset) {\n      this.direction = 'up';\n    }\n    this.previousYOffset = window.pageYOffset;\n  };\n\n  isReady = false;\n  isEnabled = false;\n  isDebug = false;\n\n  progressMode = false;\n\n  constructor(props) {\n    super(props);\n    const {\n      children,\n      onStepEnter,\n      onStepExit,\n      onStepProgress,\n      offset = 0.3,\n      progress = false,\n      threshold = 4,\n      debug,\n    } = this.props;\n\n    React.Children.forEach(children, (_, idx) => {\n      const childId = `react-scrollama-${idx}`;\n      this[childId] = React.createRef();\n      this.stepElIds.push(childId);\n    });\n\n    if (offset && !isNaN(offset))\n      this.offsetVal = Math.min(Math.max(0, offset), 1);\n\n    this.cb.stepEnter = onStepEnter;\n    this.cb.stepExit = onStepExit;\n    this.cb.stepProgress = onStepProgress;\n\n    this.isDebug = debug;\n    this.progressMode = progress;\n    this.progressThreshold = Math.max(1, +threshold);\n\n    this.isReady = true;\n\n    // offsetMargin stored in state because it's the only property that is\n    // changed after Scrollama's construction and may be rendered (<DebugOffset/>'s\n    // position depends on it)\n    this.state = {\n      offsetMargin: this.offsetVal * this.viewH,\n    };\n  }\n\n  componentDidMount() {\n    this.domDidLoad.bind(this)();\n    window.addEventListener('load', this.domDidLoad.bind(this));\n  }\n\n  domDidLoad() {\n    this.handleResize();\n    this.handleEnable(true);\n    window.addEventListener('resize', this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('load', this.domDidLoad.bind(this));\n    window.removeEventListener('resize', this.handleResize);\n    this.handleEnable(false);\n  }\n\n  /* Get step can take a step id or grab an id off a target element */\n  getStep = arg => {\n    const id =\n      arg instanceof Element\n        ? arg.getAttribute('data-react-scrollama-id')\n        : arg;\n    const step = this[id];\n    if (step && step.current) {\n      return step.current;\n    }\n    throw 'Could not get step with id ' + id;\n  };\n\n  handleResize = () => {\n    this.viewH = window.innerHeight;\n    this.pageH = getPageHeight();\n    this.setState({ offsetMargin: this.offsetVal * this.viewH });\n\n    if (this.isReady) {\n      // recalculate offset heights for each step\n      this.stepElIds.forEach(id => {\n        const step = this.getStep(id);\n        step.updateOffsetHeight();\n      });\n      if (this.isEnabled) this.updateIO();\n    }\n  };\n\n  handleEnable = enable => {\n    if (enable && !this.isEnabled) {\n      if (this.isReady) {\n        this.updateIO();\n      } else {\n        console.error(\n          'react scrollama: handleEnable() called before scroller was ready',\n        );\n        this.isEnabled = false;\n        return;\n      }\n    }\n    if (!enable && this.isEnabled) {\n      OBSERVER_NAMES.forEach(this.disconnectObserver);\n    }\n    this.isEnabled = enable;\n  };\n\n  // Recreate all intersection observers\n  updateIO = () => {\n    OBSERVER_NAMES.forEach(this.disconnectObserver);\n    this.updateStepAboveIO();\n    this.updateStepBelowIO();\n\n    if (this.progressMode) this.updateStepProgressIO();\n  };\n\n  /* INTERSECTION OBSERVER CREATORS */\n\n  // Create observers for intersections above steps\n  updateStepAboveIO = () => {\n    const { offsetMargin } = this.state;\n    this.io.stepAbove = this.stepElIds.map(id => {\n      const step = this.getStep(id);\n      const stepStateOffsetHeight = step.updateOffsetHeight();\n      const marginTop = -offsetMargin + stepStateOffsetHeight;\n      const marginBottom = offsetMargin - this.viewH;\n      const options = {\n        rootMargin: `${marginTop}px 0px ${marginBottom}px 0px`,\n      };\n\n      const obs = new IntersectionObserver(this.intersectStepAbove, options);\n      obs.observe(step.getDOMNode());\n      return obs;\n    });\n  };\n\n  // Create observers for intersections below steps\n  updateStepBelowIO = () => {\n    const { offsetMargin } = this.state;\n    this.io.stepBelow = this.stepElIds.map(id => {\n      const step = this.getStep(id);\n      const stepStateOffsetHeight = step.updateOffsetHeight();\n      const marginTop = -offsetMargin;\n      const marginBottom = offsetMargin - this.viewH + stepStateOffsetHeight; //step.state.offsetHeight;\n      const options = {\n        rootMargin: `${marginTop}px 0px ${marginBottom}px 0px`,\n      };\n\n      const obs = new IntersectionObserver(this.intersectStepBelow, options);\n      obs.observe(step.getDOMNode());\n      return obs;\n    });\n  };\n\n  // Create observers for progress\n  updateStepProgressIO = () => {\n    const { offsetMargin } = this.state;\n    this.io.stepProgress = this.stepElIds.map(id => {\n      const step = this.getStep(id);\n      const marginTop = -offsetMargin + step.state.offsetHeight;\n      const marginBottom = offsetMargin - this.viewH;\n      const options = {\n        rootMargin: `${marginTop}px 0px ${marginBottom}px 0px`,\n        threshold: this.createThreshold(step.state.offsetHeight ?? 1),\n      };\n\n      const obs = new IntersectionObserver(this.intersectStepProgress, options);\n      obs.observe(step.getDOMNode());\n      return obs;\n    });\n  };\n\n  /* INTERSECTION OBSERVER HANDLERS */\n\n  // Handles scrolling down and entering or scrolling up and leaving a step\n  intersectStepAbove = ([entry]) => {\n    this.updateDirection();\n    const { offsetMargin } = this.state;\n    const {\n      isIntersecting,\n      boundingClientRect: { top, bottom },\n      target,\n    } = entry;\n\n    const topAdjusted = top - offsetMargin;\n    const bottomAdjusted = bottom - offsetMargin;\n\n    const step = this.getStep(target);\n\n    if (\n      isIntersecting &&\n      topAdjusted <= 0 &&\n      bottomAdjusted >= 0 &&\n      this.direction === 'down' &&\n      step.state.state !== 'enter'\n    )\n      this.notifyStepEnter(step, this.direction);\n\n    // Exiting from above means not intersecting and topAdjusted is positive\n    if (\n      !isIntersecting &&\n      // Should be >0, but >-0.05 fixes a weird floating point issue in Chrome.\n      // The exact –ε is different for every this.prop.offset. Very sad folks.\n      topAdjusted > -0.5 &&\n      this.direction === 'up' &&\n      step.state.state === 'enter'\n    )\n      this.notifyStepExit(step, this.direction);\n  };\n\n  // Handles scrolling up and entering or scrolling down and leaving a step\n  intersectStepBelow = ([entry]) => {\n    this.updateDirection();\n    const { offsetMargin } = this.state;\n    const {\n      isIntersecting,\n      boundingClientRect: { top, bottom },\n      target,\n    } = entry;\n\n    const topAdjusted = top - offsetMargin;\n    const bottomAdjusted = bottom - offsetMargin;\n\n    const step = this.getStep(target);\n\n    if (\n      isIntersecting &&\n      topAdjusted <= 0 &&\n      bottomAdjusted >= 0 &&\n      this.direction === 'up' &&\n      step.state.state !== 'enter'\n    )\n      this.notifyStepEnter(step, this.direction);\n\n    if (\n      !isIntersecting &&\n      bottomAdjusted < 0 &&\n      this.direction === 'down' &&\n      step.state.state === 'enter'\n    )\n      this.notifyStepExit(step, this.direction);\n  };\n\n  intersectStepProgress = ([entry]) => {\n    this.updateDirection();\n    const {\n      isIntersecting,\n      intersectionRatio,\n      boundingClientRect: { bottom },\n      target,\n    } = entry;\n\n    const bottomAdjusted = bottom - this.state.offsetMargin;\n    if (isIntersecting && bottomAdjusted >= 0)\n      this.notifyStepProgress(this.getStep(target), intersectionRatio);\n  };\n\n  createThreshold = height => {\n    const count = Math.ceil(height / this.progressThreshold);\n    const t = [];\n    const ratio = 1 / count;\n    for (let i = 0; i <= count; i += 1) {\n      t.push(i * ratio);\n    }\n    return t;\n  };\n\n  /* NOTIFY CALLBACKS */\n\n  notifyStepProgress = (step, progress) => {\n    if (progress !== undefined) step.progress(progress);\n\n    const resp = {\n      element: step.getDOMNode(),\n      data: step.getData(),\n      progress: step.state.progress,\n    };\n    if (step.state.state === 'enter') this.cb.stepProgress(resp);\n  };\n\n  notifyStepEnter = (step, direction) => {\n    step.enter(direction);\n\n    const resp = {\n      element: step.getDOMNode(),\n      data: step.getData(),\n      direction,\n    };\n    if (this.cb.stepEnter) this.cb.stepEnter(resp);\n\n    if (this.progressMode) this.notifyStepProgress(step);\n  };\n\n  notifyStepExit = (step, direction) => {\n    if (this.progressMode) {\n      if (direction === 'down' && step.state.progress < 1)\n        this.notifyStepProgress(step, 1);\n      if (direction === 'up' && step.state.progress > 0)\n        this.notifyStepProgress(step, 0);\n    }\n    step.exit(direction);\n\n    const resp = {\n      element: step.getDOMNode(),\n      data: step.getData(),\n      direction,\n    };\n    if (this.cb.stepExit) this.cb.stepExit(resp);\n  };\n\n  render() {\n    return (\n      <Fragment>\n        {this.isDebug && (\n          <DebugOffset\n            offsetMargin={this.state.offsetMargin}\n            offsetVal={this.offsetVal}\n          />\n        )}\n        {React.Children.map(this.props.children, (child, index) => {\n          const id = this.stepElIds[index];\n          return React.cloneElement(child, {\n            scrollamaId: id,\n            ref: this[id],\n          });\n        })}\n      </Fragment>\n    );\n  }\n}\n\nfunction getPageHeight() {\n  const body = document.body;\n  const html = document.documentElement;\n\n  return Math.max(\n    body.scrollHeight,\n    body.offsetHeight,\n    html.clientHeight,\n    html.scrollHeight,\n    html.offsetHeight,\n  );\n}\n\nexport default Scrollama;\n","import React, { Component } from 'react';\n\nclass Step extends Component {\n  state = {\n    direction: null, // 'up' or 'down'\n    state: null, // 'enter' or 'exit'\n    offsetHeight: null,\n    progress: 0,\n  };\n\n  nodeRef = React.createRef();\n\n  getDOMNode = () => this.nodeRef.current;\n\n  getData = () => this.props.data;\n\n  updateOffsetHeight = () => {\n    const offsetHeight = this.getDOMNode().offsetHeight;\n    this.setState({\n      offsetHeight,\n    });\n    return offsetHeight;\n  };\n\n  enter = direction => this.setState({ state: 'enter', direction });\n  exit = direction => this.setState({ state: 'exit', direction });\n  progress = progress => this.setState({ progress });\n\n  render() {\n    const { scrollamaId, children } = this.props;\n\n    return React.cloneElement(React.Children.only(children), {\n      // place attribuet on child to retrieve id from the raw DOM node (which\n      // is what the intersection observer gives our callback\n      'data-react-scrollama-id': scrollamaId,\n\n      // place ref on child to calculate offsets\n      ref: this.nodeRef,\n    });\n  }\n}\n\nexport default Step;\n","import React, { PureComponent } from 'react';\nimport injectSheet from 'react-jss';\nimport { Scrollama, Step } from 'react-scrollama';\n\nconst styles = {\n  navbar: {\n    position: 'fixed',\n    display: 'flex',\n    top: 0,\n    right: 0,\n    zIndex: 1,\n    '& a': {\n      display: 'block',\n      fontSize: '20px',\n      padding: '20px',\n    },\n  },\n  pageTitle: {\n    textAlign: 'center',\n    fontSize: 30,\n    margin: '110px 0 10px',\n  },\n  pageSubtitle: {\n    textAlign: 'center',\n    fontSize: '24px',\n    color: '#888',\n  },\n  graphicContainer: {\n    padding: '40vh 2vw 70vh',\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n  graphic: {\n    flexBasis: '60%',\n    position: 'sticky',\n    width: '100%',\n    height: '60vh',\n    top: '20vh',\n    backgroundColor: '#aaa',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    '& p': {\n      fontSize: '5rem',\n      fontWeight: 700,\n      textAlign: 'center',\n      color: '#fff',\n    },\n  },\n  scroller: {\n    flexBasis: '35%',\n  },\n  step: {\n    margin: '0 auto 3rem auto',\n    padding: '180px 0',\n    border: '1px solid #333',\n    '& p': {\n      textAlign: 'center',\n      padding: '1rem',\n      fontSize: '1.8rem',\n      margin: 0,\n    },\n    '&:last-child': {\n      marginBottom: 0,\n    },\n  },\n};\n\nclass Demo extends PureComponent {\n  state = {\n    data: 0,\n    steps: [10, 20, 30],\n    progress: 0,\n  };\n\n  onStepEnter = ({ data }) => {\n    this.setState({ data });\n  };\n\n  onStepExit = ({ direction, data }) => {\n    if (direction === 'up' && data === this.state.steps[0]) {\n      this.setState({ data: 0 });\n    }\n  };\n\n  onStepProgress = ({ progress }) => {\n    this.setState({ progress });\n  };\n\n  render() {\n    const { data, steps, progress } = this.state;\n    const { classes } = this.props;\n\n    return (\n      <div>\n        <div className={classes.navbar}>\n          <a href=\"https://github.com/jsonkao/react-scrollama\">GitHub</a>\n        </div>\n        <p className={classes.pageTitle}>\n          <a href=\"https://github.com/jsonkao/react-scrollama\">\n            React Scrollama\n          </a>{' '}\n          Example\n        </p>\n        <p className={classes.pageSubtitle}>Scroll ↓</p>\n        <div className={classes.graphicContainer}>\n          <div className={classes.scroller}>\n            <Scrollama\n              onStepEnter={this.onStepEnter}\n              onStepExit={this.onStepExit}\n              progress\n              onStepProgress={this.onStepProgress}\n              offset={0.4}\n              debug\n            >\n              {steps.map(value => {\n                const isVisible = value === data;\n                const background = isVisible\n                  ? `rgba(44,127,184, ${progress})`\n                  : 'white';\n                const visibility = isVisible ? 'visible' : 'hidden';\n                return (\n                  <Step data={value} key={value}>\n                    <div className={classes.step} style={{ background }}>\n                      <p>step value: {value}</p>\n                      <p style={{ visibility }}>\n                        {Math.round(progress * 1000) / 10 + '%'}\n                      </p>\n                    </div>\n                  </Step>\n                );\n              })}\n            </Scrollama>\n          </div>\n          <div className={classes.graphic}>\n            <p>{data}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectSheet(styles)(Demo);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Demo from './Demo';\n\nReactDOM.render(<Demo />, document.getElementById('root'));\n"],"sourceRoot":""}